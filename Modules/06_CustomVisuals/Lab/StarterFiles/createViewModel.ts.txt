public createViewModel(dataView: DataView): BarchartViewModel {

    // handle case where categorical DataView is not valid
    if (typeof dataView === "undefined" ||
        typeof dataView.categorical === "undefined" ||
        typeof dataView.categorical.categories === "undefined" ||
        typeof dataView.categorical.values === "undefined") {
        return { IsNotValid: true };
    }

    this.settings = VisualSettings.parse(dataView) as VisualSettings;

    var categoricalDataView: DataViewCategorical = dataView.categorical;
    var categoryColumn: DataViewCategoricalColumn = categoricalDataView.categories[0];
    var categoryNames: PrimitiveValue[] = categoricalDataView.categories[0].values;
    var categoryValues: PrimitiveValue[] = categoricalDataView.values[0].values;

    var barchartDataPoints: BarchartDataPoint[] = [];

    for (var i = 0; i < categoryValues.length; i++) {
        // get category name and category value
        var category: string = <string>categoryNames[i];
        var categoryValue: number = <number>categoryValues[i];
        // add new data point to barchartDataPoints collection
        barchartDataPoints.push({
            Category: category,
            Value: categoryValue
        });
    }

    // get formatting code for the field that is the measure
    var format: string = categoricalDataView.values[0].source.format;

    // get persistent property values
    var sortBySize: boolean = this.settings.barchartProperties.sortBySize;
    var xAxisFontSize: number = this.settings.barchartProperties.xAxisFontSize;
    var yAxisFontSize: number = this.settings.barchartProperties.yAxisFontSize;

    var barColor: string = "";
    if (typeof (this.settings.barchartProperties.barColor) == "string") {
        barColor = <string>this.settings.barchartProperties.barColor;
    }
    else {
        barColor = <string>this.settings.barchartProperties.barColor.solid.color;
    }


    // sort dataset rows by measure value if required
    if (sortBySize) {
        barchartDataPoints.sort((x, y) => { return y.Value - x.Value })
    }
    else {
        barchartDataPoints.sort((x, y) => { return (y.Category > x.Category) ? -1 : 1 })
    }

    // return view model to update method
    return {
        IsNotValid: false,
        DataPoints: barchartDataPoints,
        Format: format,
        SortBySize: sortBySize,
        BarColor: barColor,
        XAxisFontSize: xAxisFontSize,
        YAxisFontSize: yAxisFontSize
    };

}